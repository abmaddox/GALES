#!/usr/bin/env python3

"""
GALES launcher for the prokaryotic annotation pipeline.  This does the following:

- Parses your passed options to gather input
- Checks that you have the reference files necessary to run the pipeline
- Makes sure docker is present
- Generates the CWL/JSON files from your input to represent your pipeline
- Launches pipeline, writing to the output directory you specified

Variables used in the CWL and JSON templates:
  - cwl_tools_dir   : Full path to directory within GALES which contains all the tool definitions
  - gales_ref_db_dir: Directory where all the reference files will be found, 
                      provided by --reference_directory
  - source_fasta: The single file of contigs to be annotated

TODO: Look into replacing Jinja with https://github.com/common-workflow-language/python-cwlgen

Author: Joshua Orvis
Contact:  jorvis at gmail
"""

import argparse
import os
import json
import subprocess
import sys

from jinja2 import Environment, FileSystemLoader, select_autoescape
from shutil import which

def main():
    parser = argparse.ArgumentParser( description='GALES prokaryotic annotation pipeline launcher')

    ## output file to be written
    parser.add_argument('-i', '--input_fasta', type=str, required=True, 
                        help='FASTA file containing the contigs to be annotated' )
    parser.add_argument('-od', '--output_directory', type=str, required=True, 
                        help='Path to an output directory where many files will be written' )
    parser.add_argument('-v', '--version', type=str, required=True, 
                        help='Elephant, Wolf or Cheetah version?')
    parser.add_argument('-rd', '--reference_directory', type=str, required=True, 
                        help='Directory where GALES can find the reference files needed by this pipeline, which depend on the version chosen.')
    parser.add_argument('-t', '--threads', type=int, default=1, required=False,
                        help='Number of threads to pass to tools which support it')
    parser.add_argument('-bm', '--blast_matches', type=int, default=50, required=False,
                        help='Max number of BLAST matches to return per query')
    args = check_basic_options(parser.parse_args())

    if not docker_is_present():
        sys.exit("Docker not found on this system and must be installed before GALES can be used.  https://www.docker.com/community-edition")

    if not cwlrunner_is_present():
        sys.exit("cwl-runner not found on this system and must be installed before GALES can be used: sudo pip install cwlref-runner")

    pipeline_cwl_path, pipeline_json_path = write_pipeline_files(args=args)
    missing_refs = check_reference_files(pipeline_cwl=pipeline_cwl_path, pipeline_json=pipeline_json_path)
    
    if len(missing_refs) > 0:
        error_msg = "Cannot start.  The following reference files were not found on your system:\n\n"
        for path in missing_refs:
            error_msg += "\t{0}\n".format(path)

        error_msg += "\nPlease check the bin directory for utilities to download the files needed for this pipeline\n"
        sys.exit(error_msg)

    ######
    #  If we got this far, the system setup looks OK. Let's do this thing.
    print("Starting pipeline.  If this is your first time running this pipeline " +
          "there will be some latency as the necessary Docker images are downloaded." +
          " This is a one-time cost.", file=sys.stderr)

    # cwl-runner --outdir OUTDIR 
    pipeline_cmd = "cwl-runner --outdir {0} {1} {2}".format(args.output_directory, pipeline_cwl_path, pipeline_json_path)
    run_command(pipeline_cmd)



def check_basic_options(args):
    # Does the input FASTA file actually exist?
    if not os.path.exists(args.input_fasta):
        sys.exit("ERROR: Unable to find input FASTA passed: {0}".format(args.input_fasta))

    # Does the output directory exist?
    if not os.path.exists(args.output_directory):
        # If not, can we make it?  If not, a FileNotFoundError gets thrown
        try:
            retval = os.mkdir(args.output_directory)
        except FileNotFoundError:
            sys.exit("ERROR: Output directory ({0}) doesn't exist and I failed to create it.  Check permissions and that the base directory exists.".format(args.output_directory))

    # We rewrite these to absolute paths so Docker can handle them properly as mounts
    args.input_fasta = os.path.abspath(args.input_fasta)
    args.output_directory = os.path.abspath(args.output_directory)
    args.reference_directory = os.path.abspath(args.reference_directory)

    # Was the version passed valid?
    possible_versions = ['elephant', 'wolf', 'cheetah']
    args.version = args.version.lower()

    if args.version not in possible_versions:
        sys.exit("The current available versions of the prokaryotic pipeline are Elephant, Wolf and Cheetah.  (passed: {0})".format(args.version))

    # temporary: supported versions
    if args.version not in ['cheetah']:
        sys.exit("The elephant and wolf versions are currently unavailable.  Rebuilding the reference datasets they rely upon for the first release. (message dated: 2017-11-03)")

    return args

def check_reference_files(pipeline_cwl=None, pipeline_json=None):
    """
    Reads through the JSON files and makes sure the reference files are actually present.
    """
    with open(pipeline_json) as json_fh:    
        json_config = json.load(json_fh)

    ref_files_missing = list()
    _parse_json_dict(json_config, ref_files_missing)

    return ref_files_missing

def cwlrunner_is_present():
    """Check whether cwl-runner is on PATH and marked as executable."""
    return which('cwl-runner') is not None

def docker_is_present():
    """Check whether docker is on PATH and marked as executable."""
    return which('docker') is not None

def _parse_json_dict(context, missing):
    for k in context:
        if isinstance(context[k], dict):
            _parse_json_dict(context[k], missing)
        elif isinstance(context[k], list):
            _parse_json_list(context[k], missing)
        else:
            if k == 'path':
                if len(context[k]) > 0:
                    if not os.path.exists(context[k]):
                        missing.append(context[k])

def _parse_json_list(context, missing):
    for thing in context:
        # These are only supposed to be dicts
        if isinstance(thing, dict):
            _parse_json_dict(thing, missing)
        else:
            sys.exit("ERROR: Unexpected type of thing in the JSON list: ".format(thing))

def run_command(cmd):
    print("Running command: {0}".format(cmd))
    return_code = subprocess.call(cmd, shell=True)
    if return_code != 0:
        sys.exit("ERROR: Return code {0} when running the following command: {1}".format(return_code, cmd))


def write_pipeline_files(args=None):
    gales_bin_dir = os.path.dirname(os.path.abspath(__file__))
    gales_cwl_dir = "{0}/../cwl/workflows".format(gales_bin_dir)
    gales_tools_dir = "{0}/../cwl/tools".format(gales_bin_dir)
    dest_cwl  = "{0}/prok-annotation-{1}.cwl".format(args.output_directory, args.version)
    dest_json = "{0}/prok-annotation-{1}.json".format(args.output_directory, args.version)

    replaced_vars = {
        'cwl_tools_dir': gales_tools_dir,
        'gales_ref_db_dir': args.reference_directory,
        'source_fasta': args.input_fasta,
        'threads': args.threads,
        'blast_matches': args.blast_matches
    }

    env = Environment(
        loader=FileSystemLoader(gales_cwl_dir),
        autoescape=select_autoescape(['json'])
    )

    json_template = env.get_template("prok-annotation-{0}.json".format(args.version))
    with open(dest_json, 'wt') as fh:
        fh.write(json_template.render(replaced_vars))

    cwl_template = env.get_template("prok-annotation-{0}.cwl".format(args.version))
    with open(dest_cwl, 'wt') as fh:
        fh.write(cwl_template.render(replaced_vars))

    return dest_cwl, dest_json
    

if __name__ == '__main__':
    main()







